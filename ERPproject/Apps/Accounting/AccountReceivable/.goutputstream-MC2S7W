from django.db import models
from django.db import models
from const.const import *
from django.utils.translation import ugettext as _
from django.contrib.contenttypes.models import ContentType
from django.contrib.contenttypes import generic

from decimal import *
from datetime import datetime, timedelta

""" Model from sales modul """
class Ms_Customer(models.Model):
    company = models.CharField(_('Nama Perusahaan'), max_length=80)
    first_name = models.CharField(_('first name'), max_length=80, blank=True)
    last_name = models.CharField(_('last name'), max_length=80, blank=True)
    address = models.CharField(_('Alamat'), max_length=255)
    zipcode = models.CharField(_('Kode Pos'), max_length=7)
    city = models.CharField(_('Kota'), max_length=128)
    country = models.CharField(_('Negara'), max_length=255)
    npwp = models.CharField(_('N.P.W.P'), max_length=255, blank=True, null=True)

    class Meta:
        app_label = 'AccountReceivable'
        verbose_name = _('Pelanggan')
        verbose_name_plural = _('Pelanggan')
        ordering = ('company', 'last_name', 'first_name')

    @property
    def full_name(self):
        return '%s %s' % (self.first_name, self.last_name)

    def __unicode__(self):
        return '%s' % self.company

""" Model from sales modul """
class Tr_DO(models.Model):
    do_no = models.PositiveIntegerField(_('Nomor DO'),
                                             blank=True,
                                             null=True)
    do_name = models.CharField(_('Nama DO'), max_length=20)
    date = models.DateField(_('Tanggal DO'), max_length=20)
    ref_contact = models.CharField(_('Referen Contact'), max_length=20)
    contact = models.CharField(_('Contact'), max_length=20)
    description = models.TextField(_('Deskripsi'), max_length=20)
    
    def __unicode__(self):
        return '%s' % self.do_no

""" Model from sales modul """        
class Tr_SO(models.Model):
    so_no = models.models.PositiveIntegerField(_('Nomor SO'), blank=True, null=True)
    status = models.IntegerField(_('Status'), choices=SO_STATUS_CHOICES)
    date = models.DateField(_('Tanggal SO'))
    client = models.ForeignKey(Ms_Customer, verbose_name=_('Nama Pelanggan'))
    payment_term = models.IntegerField(_('Jangka Waktu'), help_text=('*)Jangka waktu pembayaran dalam hari'), max_length=2)
    currency = models.CharField(_('Mata Uang'),
                                max_length=124,
                                choices=INVOICE_CURRENCY_CHOICES)
    tax = models.ForeignKey('Tax', verbose_name=_('Pajak'), blank=True, null=True)
    ref_po = models.CharField(_('referensi PO'), max_length=10)
    items = generic.GenericRelation('Ms_Item')

    class Meta:
        app_label = 'AccountReceivable'
        verbose_name = _('Order Penjualan')
        verbose_name_plural = _('Faktur Penjualan')
        ordering = ['client']
        
    def __unicode__(self):
        return '%s' % self.so_no

    def is_address(self):
        return '%(address)s, %(city)s, %(country)s.' % {'address': self.client.address,
                                           'city': self.client.city,
                                           'country': self.client.country}
    is_address.short_description = _('Alamat')

    @property
    def so_no(self):
        nol = 5 - len(str(self.id))
        if nol == 1: num = "0" 
        elif nol == 2: num = "00"
        elif nol == 3: num = "000"
        elif nol == 4: num = "0000"
        number = num + str(self.id)
        return '%(prefix)s/%(day)s/%(mount)s/%(unique_id)s' % {'prefix': SO_ID_PREFIX,
                                                    'day': self.date.strftime("%d"),
                                                    'mount': self.date.strftime("%m"),
                                                    'unique_id': number}

    @property
    def npwp(self):
        return '%(npwp)s' % {'npwp': self.client.npwp} 
    
    @property
    def subtotal(self):
        subtotal = Decimal(0)
        for item in self.items.all(): subtotal += item.amount()
        return subtotal

    @property
    def total_tax(self):
        if self.tax: total_tax = (self.subtotal * (self.tax.percentage)) / 100
        else: total_tax = Decimal(0)
        return total_tax.quantize(Decimal('0.01'), ROUND_HALF_UP)
    
    @property
    def total(self):
        return self.subtotal if not self.tax else self.subtotal + self.total_tax

    @property
    def is_credit(self):
        if self.total < 0:
            return True
        else: return False

    @property
    def exp_date(self):
        expiration_time = timedelta(days=self.payment_term)
        return (self.date + expiration_time)
    
    def is_warn_exp(self):
        now = datetime.now().date()
        expiration_time = self.exp_date
        days_left = (expiration_time - now).days
        if (days_left == 3) or (days_left > 3): 
            return 'Jatuh Tempo %(exp)s hari lagi' % {'exp': days_left}
        elif (days_left > 0) and (days_left < 3):
            return 'Peringatan, Jatuh Tempo %(exp)s hari lagi' % {'exp': days_left}
        elif days_left == 0 : 
            return 'Faktur Jatuh Tempo'
        elif days_left < 1 :
            return 'Faktur Jatuh Tempo %(exp)s hari yang lalu' % {'exp': days_left}
    is_warn_exp.short_description = _('Peringatan Jatuh Tempo')

class Tr_Receivable_Invoice(models.Model):
    receivable_invoice_no = models.PositiveIntegerField(_('Nomor Faktur'),
                                             blank=True,
                                             null=True)
    do_no = models.ForeignKey('Tr_DO',verbose_name=_('Nomor DO'), blank=True, null=True)
    so_no = models.ForeignKey('Tr_DO',verbose_name=_('Nomor SO'), blank=True, null=True)
    date = models.DateField(_('Tanggal Faktur'))
    client = models.ForeignKey(Ms_Customer, verbose_name=_('Nama Pelanggan'),editable=False, default='%s' % (do_no, do_no.client))
    payment_term = models.IntegerField(_('Jangka Waktu'), help_text=('*)Jangka waktu pembayaran dalam hari'), max_length=2)
    currency = models.CharField(_('Mata Uang'),
                                max_length=124,
                                choices=INVOICE_CURRENCY_CHOICES)
    status = models.IntegerField(_('Status'), choices=INVOICE_STATUS_CHOICES)
    tax = models.ForeignKey('Tax', verbose_name=_('Pajak'), blank=True, null=True)
    
    items = generic.GenericRelation('Item')

    class Meta:
        app_label = 'AccountReceivable'
        verbose_name = _('Faktur Penjualan')
        verbose_name_plural = _('Faktur Penjualan')
        ordering = ['invoice_no']

    def __unicode__(self):
        return '%(company)s - %(date)s' % {'company': self.client.company,
                                           'date': self.date.strftime('%d-%m-%Y') }
       
    def is_address(self):
        return '%(address)s, %(city)s, %(country)s.' % {'address': self.client.address,
                                           'city': self.client.city,
                                           'country': self.client.country}
    is_address.short_description = _('Alamat')

    @property
    def receivable_invoice_id(self):
        nol = 5 - len(str(self.id))
        if nol == 1: num = "0" 
        elif nol == 2: num = "00"
        elif nol == 3: num = "000"
        elif nol == 4: num = "0000"
        number = num + str(self.id)
        return '%(prefix)s/%(day)s/%(mount)s/%(unique_id)s' % {'prefix': INVOICE_ID_PREFIX,
                                                    'day': self.date.strftime("%d"),
                                                    'mount': self.date.strftime("%m"),
                                                    'unique_id': number}

    @property
    def payment_term(self):
        self.payment_term = self.so_no.payment_term
        return self.payment_term
    
    @property
    def client(self):
        self.client = self.so_no.client
        return self.client
        
    @property
    def currency(self):
        self.currency = self.so_no.currency
        return self.currency
    
    @property
    def tax(self):
        self.tax = self.so_no.tax
        return self.tax
    
    @property
    def items(self):
        self.items = self.so_no.items
        return self.items
            
    @property
    def npwp(self):
        return '%(npwp)s' % {'npwp': self.client.npwp} 
    
    @property
    def subtotal(self):
        subtotal = Decimal(0)
        for item in self.items.all(): subtotal += item.amount()
        return subtotal

    @property
    def total_tax(self):
        if self.tax: total_tax = (self.subtotal * (self.tax.percentage)) / 100
        else: total_tax = Decimal(0)
        return total_tax.quantize(Decimal('0.01'), ROUND_HALF_UP)
    
    @property
    def total(self):
        return self.subtotal if not self.tax else self.subtotal + self.total_tax

    @property
    def is_credit(self):
        if self.total < 0:
            return True
        else: return False

    @property
    def exp_date(self):
        expiration_time = timedelta(days=self.payment_term)
        return (self.so_no.date + expiration_time)
    
    def is_warn_exp(self):
        now = datetime.now().date()
        expiration_time = self.exp_date
        days_left = (expiration_time - now).days
        if (days_left == 3) or (days_left > 3): 
            return 'Jatuh Tempo %(exp)s hari lagi' % {'exp': days_left}
        elif (days_left > 0) and (days_left < 3):
            return 'Peringatan, Jatuh Tempo %(exp)s hari lagi' % {'exp': days_left}
        elif days_left == 0 : 
            return 'Faktur Jatuh Tempo'
        elif days_left < 1 :
            return 'Faktur Jatuh Tempo %(exp)s hari yang lalu' % {'exp': days_left}
    is_warn_exp.short_description = _('Peringatan Jatuh Tempo')

class Ms_Tax(models.Model):
    name = models.CharField(_('Nama'), max_length=255)
    description = models.CharField(_('Deskripsi'), max_length=255)
    percentage = models.DecimalField(_('prosentase'),
                                     max_digits=4,
                                     decimal_places=2)

    class Meta:
        app_label = 'AccountReceivable'
        verbose_name = _('Pajak')
        verbose_name_plural = _('Pajak')

    def __unicode__(self):
        return '%s' % self.name

""" from Sales Model """
class Ms_Item(models.Model):
    item  = models.CharField(_('Item'), max_length=20)
    quantity = models.IntegerField(_('Jumlah'), max_length=10)
    price = models.DecimalField(_('Harga'), max_digits=19, decimal_places=2)
    
    content_type = models.ForeignKey(ContentType, verbose_name=_('content type'))
    object_id = models.PositiveIntegerField(_('object id'), db_index=True)
    object = generic.GenericForeignKey('content_type', 'object_id')
       
    class Meta:
        app_label = 'AccountReceivable'
        verbose_name = _('item')
        verbose_name_plural = _('item')
        ordering = ['item']

    def __unicode__(self):
        return '%s' % self.item 
    
    def amount(self):
        return self.quantity * self.price
    amount.short_description = _('Total')
