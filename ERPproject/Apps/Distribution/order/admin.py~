from django.contrib import admin
from django.utils.translation import ugettext_lazy as _
from Apps.Distribution.order.models import SalesOrder, QuoteOrder, OrderItem
from django import forms
from suit.widgets import EnclosedInput, Select, AutosizedTextarea, SuitDateWidget
from library.const.order import SO_FINISH_STATUS, INVOICE_FINISH_STATUS, DO_FINISH_STATUS
from Apps.Distribution.customer.models import Company
from django_select2 import AutoModelSelect2Field, AutoHeavySelect2Widget
from django.db.models import Q
from django.http import HttpResponseRedirect


class FormItemInline(forms.ModelForm):
    class Meta:
        widgets = {
            'capacity': EnclosedInput(append='ml', attrs={'class': 'input-small'}),
            'height': EnclosedInput(append='mm', attrs={'class': 'input-small'}),
            'quantity': EnclosedInput(attrs={'class': 'input-small'}),
            'price': EnclosedInput(attrs={'class': 'input-large'}),
            'weight': EnclosedInput(append='gr', attrs={'class': 'input-small'}),
            'diameter': EnclosedInput(append='mm', attrs={'class': 'input-small'}),
            'color': Select(attrs={'class': 'input-medium'}),
        }

class ItemInline(admin.StackedInline):
    form = FormItemInline
    model = OrderItem
    extra = 1
    verbose_name_plural = 'Detail Order Item'
    can_delete = True
    fields = ['color', 'category', 'capacity', 'weight', 'height', 'diameter', 'image', 'label', 'quantity', 'price']

    def get_formset(self, request, obj=None):
        formset = super(ItemInline, self).get_formset(request, obj)

        if obj is not None and obj.status in (SO_FINISH_STATUS or INVOICE_FINISH_STATUS or DO_FINISH_STATUS):
            formset.max_num = 0
            formset.can_delete = False
        if obj is not None:
            formset.extra = 0
        return formset

    def get_readonly_fields(self, request, obj=None):
        readonly = super(ItemInline, self).get_readonly_fields(request, obj)

        if getattr(obj, 'status', None) in (SO_FINISH_STATUS or INVOICE_FINISH_STATUS or DO_FINISH_STATUS):
            readonly = ('color', 'category', 'capacity', 'height', 'weight', 'diameter', 'image', 'label', 'quantity', 'price')
        return readonly

    def formfield_for_dbfield(self, db_field, **kwargs):
        if db_field.name == 'image':
            request = kwargs.pop("request", None)
            kwargs['widget'] = ProductImage
            return db_field.formfield(**kwargs)
        elif db_field.name == 'label':
            request = kwargs.pop("request", None)
            kwargs['widget'] = ProductImage
            return db_field.formfield(**kwargs)
        return super(ItemInline,self).formfield_for_dbfield(db_field, **kwargs)

from django.contrib.admin.widgets import AdminFileWidget
from django.utils.safestring import mark_safe

class ProductImage(AdminFileWidget):
    def render(self, name, value, attrs=None):
        output = []
        if value and getattr(value, "url", None):
            image_url = value.url
            file_name=str(value)
            output.append(u' <a href="%s" target="_blank"><img width="100px" height="110px" src="%s" alt="%s" /></a> %s ' % \
                (image_url, image_url, file_name, _(' ')))
        output.append(super(AdminFileWidget, self).render(name, value, attrs))
        return mark_safe(u''.join(output))


class CorpChoices(AutoModelSelect2Field):
    queryset = Company.objects.all()
    search_fields = ['corporate__icontains']


class FormQuoteOrder(forms.ModelForm):
    corp_verbose_name = 'Nama Perusahaan'
    customer = CorpChoices(label=corp_verbose_name.capitalize(),
                           widget=AutoHeavySelect2Widget(select2_options=
                                                              {'width': '220px', 'placeholder': 'Cari %s ...'
                                                                                                % corp_verbose_name}))
    class Meta:
        model = QuoteOrder
        widgets = {
            'quotation': AutosizedTextarea(attrs={'rows': '3'}),
            'term_service': AutosizedTextarea(attrs={'rows': '3'}),
            'shipping_address': AutosizedTextarea(attrs={'rows': '3'}),
            'date': SuitDateWidget
        }

    def __init__(self, *args, **kwargs):
        super(FormQuoteOrder, self).__init__(*args, **kwargs)
        if not None:
            self.initial.update({'sales_person': 1}),
        else:
            pass


class QuoteOrderAdmin(admin.ModelAdmin):
    form = FormQuoteOrder
    list_display = ['number', 'customer', 'status', 'date', 'payment_term', 'tax', 'display_price']
    inlines = [ItemInline]
    search_fields = ['number', 'customer__corporate', 'customer__name']
    list_filter = ['status', 'payment_term', 'shipping_methods']
    date_hierarchy = 'date'
    suit_form_tabs = (('permintaan', 'Data Permintaan'), ('keterangan', 'Data Penawaran'))
    readonly_fields = ['total_price']
    actions = ["generate_order"]
    list_per_page = 20
    exclude = ['total']
    fieldsets = [
        (None, {
            'classes': ('suit-tab suit-tab-permintaan',),
            'fields': ['po_reference', 'customer', 'status', 'quotation', 'term_service', 'date', 'total_price']
        }),

        (None, {
            'classes': ('suit-tab suit-tab-keterangan',),
            'fields': ('period', 'payment_type', 'payment_term', 'currency', 'tax',
                       'shipping_methods', 'sales_type', 'shipping_address')
        })
    ]

    def suit_cell_attributes(self, obj, column):
        if column == 'date':
            return {'class': 'text-center'}
        elif column == 'payment_term':
            return {'class': 'text-center'}
        elif column == 'status':
            return {'class': 'text-center'}
        elif column == 'tax':
            return {'class': 'text-center'}
        elif column == 'display_price':
            return {'class': 'text-center'}

    def generate_order(self, request, queryset):
        rows_updated = queryset.update(status=3)

        if rows_updated == 1:
            message_bit = "1 Order Permintaan"
        else:
            message_bit = "%s Order Permintaan" % rows_updated
        self.message_user(request, "%s berhasil disetujui menjadi Order Penjualan" % message_bit)
    generate_order.short_description = "Buat Order Penjualan"

    def queryset(self, request):
        if request.user.is_staff:
            return SalesOrder.objects.filter(Q(status=1) | Q(status=2) | Q(status=4))
        return SalesOrder.objects.filter(Q(status=1) | Q(status=2) | Q(status=4))

admin.site.register(QuoteOrder, QuoteOrderAdmin)


class FormSalesOrder(forms.ModelForm):
    corp_verbose_name = 'Nama Perusahaan'
    customer = CorpChoices(label=corp_verbose_name.capitalize(),
                           widget=AutoHeavySelect2Widget(select2_options=
                                                              {'width': '220px', 'placeholder': 'Cari %s ...'
                                                                                                % corp_verbose_name}))

    class Meta:
        model = SalesOrder
        widgets = {
            'quotation': AutosizedTextarea(attrs={'rows': '3'}),
            'term_service': AutosizedTextarea(attrs={'rows': '3'}),
            'date': SuitDateWidget
        }


class SalesOrderAdmin(admin.ModelAdmin):
    list_display = ['number', 'customer', 'status', 'date', 'payment_term', 'tax']
    inlines = [ItemInline]
    search_fields = ['number', 'customer__corporate', 'customer__name']
    list_filter = ['status', 'payment_term', 'shipping_methods']
    date_hierarchy = 'date'
    actions = ["edit_order", 'create_invoice', 'create_delivery_order']
    form = FormSalesOrder
    suit_form_tabs = (('permintaan', 'Data Permintaan'), ('keterangan', 'Data Kontrak'))
    fieldsets = [
        (None, {
            'classes': ('suit-tab suit-tab-permintaan',),
            'fields': ['po_reference', 'customer', 'status', 'quotation', 'term_service', 'date',]
        }),

        (None, {
            'classes': ('suit-tab suit-tab-keterangan',),
            'fields': ('period', 'payment_type', 'payment_term', 'currency', 'tax',
                       'shipping_methods', 'sales_type', 'shipping_address')
        })
    ]

    def suit_cell_attributes(self, obj, column):
        if column == 'date':
            return {'class': 'text-center'}
        elif column == 'payment_term':
            return {'class': 'text-center'}
        elif column == 'status':
            return {'class': 'text-center'}
        elif column == 'tax':
            return {'class': 'text-center'}

    def queryset(self, request):
        if request.user.is_staff:
            return SalesOrder.objects.filter(status=3)
        return SalesOrder.objects.filter(status=3)

    def edit_order(self, request, queryset):
        rows_updated = queryset.update(status=1)

        if rows_updated == 1:
            message_bit = "1 Order Penjualan"
        else:
            message_bit = "%s Order Penjualan" % rows_updated
        self.message_user(request, "%s berhasil diganti menjadi Order Permintaan" % message_bit)
    edit_order.short_description = "Edit Order Penjualan"

    def create_delivery_order(self, request, queryset):
        for obj in queryset:
            delivery = obj.create_delivery_order()
            data = OrderItem.objects.filter(so_reff__id=obj.id)
            for d in data:
                d.do_reff = delivery
                d.save()
            self.message_user(request, _("Order Pengiriman berhasil dibuat"))
            response = HttpResponseRedirect('/admin/shipping/deliveryorder/'+str(delivery.id))
            return response
    create_delivery_order.short_description = _("Buat Order Pengiriman")

    def create_invoice(self, request, queryset):
        for obj in queryset:
            invoice = obj.create_invoice()
            data = OrderItem.objects.filter(so_reff__id=obj.id)
            for d in data:
                d.inv_reff = invoice
                d.save()
            self.message_user(request, _("Faktur Penjualan berhasil dibuat"))
            response = HttpResponseRedirect('/admin/invoice/receivableinvoice/'+str(invoice.id))
            return response
    create_invoice.short_description = _("Buat Faktur Penjualan")

    def get_readonly_fields(self, request, obj=None):
        readonly = super(SalesOrderAdmin, self).get_readonly_fields(request, obj)

        if getattr(obj, 'status', None) in SO_FINISH_STATUS:
            readonly = ('number', 'customer', 'po_reference', 'status', 'date', 'payment_term', 'payment_type',
                        'currency', 'shipping_methods', 'tax', 'total', 'quotation', 'term_service', 'sales_person',
                        'period', 'sales_type', 'shipping_address', 'is_do', 'is_inv')
        return readonly
admin.site.register(SalesOrder, SalesOrderAdmin)
